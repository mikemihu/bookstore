// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "gotu-bookstore/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserUC is a mock of UserUC interface.
type MockUserUC struct {
	ctrl     *gomock.Controller
	recorder *MockUserUCMockRecorder
}

// MockUserUCMockRecorder is the mock recorder for MockUserUC.
type MockUserUCMockRecorder struct {
	mock *MockUserUC
}

// NewMockUserUC creates a new mock instance.
func NewMockUserUC(ctrl *gomock.Controller) *MockUserUC {
	mock := &MockUserUC{ctrl: ctrl}
	mock.recorder = &MockUserUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUC) EXPECT() *MockUserUCMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserUC) Get(ctx context.Context, id uuid.UUID) (entity.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entity.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserUCMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserUC)(nil).Get), ctx, id)
}

// Login mocks base method.
func (m *MockUserUC) Login(ctx context.Context, req entity.AuthLoginRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserUCMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUC)(nil).Login), ctx, req)
}

// Me mocks base method.
func (m *MockUserUC) Me(ctx context.Context) (entity.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Me", ctx)
	ret0, _ := ret[0].(entity.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Me indicates an expected call of Me.
func (mr *MockUserUCMockRecorder) Me(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Me", reflect.TypeOf((*MockUserUC)(nil).Me), ctx)
}

// Register mocks base method.
func (m *MockUserUC) Register(ctx context.Context, req entity.UserRegisterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserUCMockRecorder) Register(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUC)(nil).Register), ctx, req)
}

// MockBookUC is a mock of BookUC interface.
type MockBookUC struct {
	ctrl     *gomock.Controller
	recorder *MockBookUCMockRecorder
}

// MockBookUCMockRecorder is the mock recorder for MockBookUC.
type MockBookUCMockRecorder struct {
	mock *MockBookUC
}

// NewMockBookUC creates a new mock instance.
func NewMockBookUC(ctrl *gomock.Controller) *MockBookUC {
	mock := &MockBookUC{ctrl: ctrl}
	mock.recorder = &MockBookUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookUC) EXPECT() *MockBookUCMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBookUC) Get(ctx context.Context, id uuid.UUID) (entity.BookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entity.BookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBookUCMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBookUC)(nil).Get), ctx, id)
}

// GetList mocks base method.
func (m *MockBookUC) GetList(ctx context.Context, filter entity.BookGetListRequest) ([]entity.BookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, filter)
	ret0, _ := ret[0].([]entity.BookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockBookUCMockRecorder) GetList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockBookUC)(nil).GetList), ctx, filter)
}

// MockOrderUC is a mock of OrderUC interface.
type MockOrderUC struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUCMockRecorder
}

// MockOrderUCMockRecorder is the mock recorder for MockOrderUC.
type MockOrderUCMockRecorder struct {
	mock *MockOrderUC
}

// NewMockOrderUC creates a new mock instance.
func NewMockOrderUC(ctrl *gomock.Controller) *MockOrderUC {
	mock := &MockOrderUC{ctrl: ctrl}
	mock.recorder = &MockOrderUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUC) EXPECT() *MockOrderUCMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderUC) Create(ctx context.Context, req entity.OrderCreateRequest) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderUCMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderUC)(nil).Create), ctx, req)
}

// Get mocks base method.
func (m *MockOrderUC) Get(ctx context.Context, id uuid.UUID) (entity.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entity.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrderUCMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderUC)(nil).Get), ctx, id)
}

// GetList mocks base method.
func (m *MockOrderUC) GetList(ctx context.Context) ([]entity.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx)
	ret0, _ := ret[0].([]entity.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockOrderUCMockRecorder) GetList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockOrderUC)(nil).GetList), ctx)
}
