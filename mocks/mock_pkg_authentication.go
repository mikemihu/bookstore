// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/authentication/authentication.go

// Package mocks is a generated GoMock package.
package mocks

import (
	authentication "gotu-bookstore/pkg/authentication"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAuthJWT is a mock of AuthJWT interface.
type MockAuthJWT struct {
	ctrl     *gomock.Controller
	recorder *MockAuthJWTMockRecorder
}

// MockAuthJWTMockRecorder is the mock recorder for MockAuthJWT.
type MockAuthJWTMockRecorder struct {
	mock *MockAuthJWT
}

// NewMockAuthJWT creates a new mock instance.
func NewMockAuthJWT(ctrl *gomock.Controller) *MockAuthJWT {
	mock := &MockAuthJWT{ctrl: ctrl}
	mock.recorder = &MockAuthJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthJWT) EXPECT() *MockAuthJWTMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockAuthJWT) GenerateToken(secret string, userID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", secret, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthJWTMockRecorder) GenerateToken(secret, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthJWT)(nil).GenerateToken), secret, userID)
}

// ParseToken mocks base method.
func (m *MockAuthJWT) ParseToken(secret, tokenString string) (authentication.AuthClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", secret, tokenString)
	ret0, _ := ret[0].(authentication.AuthClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthJWTMockRecorder) ParseToken(secret, tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthJWT)(nil).ParseToken), secret, tokenString)
}
